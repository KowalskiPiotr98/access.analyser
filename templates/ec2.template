{
    "Description" : "This template launches EC2 layer for access.analyser project.",
    "Parameters"  : {
        "NetworkStackName" : {
            "Description" : "Name of an active CloudFormation stack that contains the networking resources such as VPC and subnet that will be used in this stack",
            "Type"        : "String",
            "MinLength"   : 1,
            "MaxLength"   : 255,
            "AllowedPattern" : "^[a-zA-Z][-a-zA-Z0-9]*$",
            "Default"        : "access-analyser-vpc"
        },
        "DatabaseStackName" : {
            "Description" : "Name of an active CloudFormation stack that creates the database that EC2 instances will use.",
            "Type"        : "String",
            "MinLength"   : 1,
            "MaxLength"   : 255,
            "AllowedPattern" : "^[a-zA-Z][-a-zA-Z0-9]*$",
            "Default"        : "access-analyser-db"
        },
        "S3StackName"       : {
            "Description" : "Name of an active CloudFormation stack that creates the S3 bucket that EC2 instances will use.",
            "Type"        : "String",
            "MinLength"   : 1,
            "MaxLength"   : 255,
            "AllowedPattern" : "^[a-zA-Z][-a-zA-Z0-9]*$",
            "Default"        : "access-analyser-s3"
        },
        "KeyName"           : {
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type"        : "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
        },
        "InstanceType"      : {
            "Description" : "WebServer EC2 instance type",
            "Type"        : "String",
            "Default"     : "t2.micro",
            "AllowedValues" : [
                "t1.micro",
                "t2.nano",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large"
            ],
            "ConstraintDescription" : "must be a valid EC2 instance type."
        },
        "SSHLocation"       : {
            "Description" : "The IP address range that can be used to SSH to the EC2 instances",
            "Type"        : "String",
            "MinLength"   : "9",
            "MaxLength"   : "18",
            "Default"     : "0.0.0.0/0",
            "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "DBUsername"        : {
            "Description" : "Username with which to connect to DB instance",
            "Type"        : "String",
            "AllowedPattern" : "[a-zA-Z]\\w*",
            "MinLength"      : "1",
            "MaxLength"      : "16"
        },
        "DBPassword"        : {
            "Description" : "Password with which to connect to DB instance",
            "Type"        : "String",
            "AllowedPattern" : "\\w+",
            "MinLength"      : "8",
            "MaxLength"      : "128",
            "NoEcho"         : "True"
        },
        "RepoOwner"         : {
            "Description" : "Owner of the repository with applications code",
            "Type"        : "String",
            "Default"     : "KowalskiPiotr98"
        },
        "RepoName"          : {
            "Description" : "Name of the repository with applications code",
            "Type"        : "String",
            "Default"     : "access.analyser"
        },
        "RepoBranch"        : {
            "Description" : "Name of the branch from which applications code",
            "Type"        : "String",
            "Default"     : "master"
        },
        "GithubToken"       : {
            "Description" : "Personal access token for Github. Created by entering your github account settings, Choosing Developer Settings>Personal Access Tokens and generating new token. Required permissions: public_repo - for accessing repository with applications code.",
            "Type"        : "String",
            "NoEcho"      : "True"
        }
    },
    "Resources"   : {
        "EC2SecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "SSH and Web access to EC2 instance",
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "22",
                        "ToPort"     : "22",
                        "CidrIp"     : {
                            "Ref" : "SSHLocation"
                        },
                        "Description" : "Enable SSH access via port 22"
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "5000",
                        "ToPort"     : "5001",
                        "SourceSecurityGroupId" : {
                            "Ref" : "ALBSecurityGroup"
                        },
                        "Description"           : "Enable access to web application"
                    }
                ],
                "VpcId"                : {
                    "Fn::ImportValue" : {
                        "Fn::Sub" : "${NetworkStackName}-VPCID"
                    }
                }
            }
        },
        "LaunchConfig"     : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "configSets" : {
                        "Install" : [
                            "Install"
                        ]
                    },
                    "Install"    : {
                        "commands" : {
                            "01getDotnet" : {
                                "command" : "sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm ; sudo yum update -y; sudo yum install aspnetcore-runtime-3.1 -y"
                            },
                            "02getCodeDeployAgent" : {
                                "command" : "sudo yum update -y; sudo yum install ruby -y; wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install; chmod +x ./install;sudo ./install auto",
                                "cwd"     : "/home/ec2-user"
                            }
                        },
                        "files"    : {
                            "/home/ec2-user/appsettings.json" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "{",
                                            "\"ConnectionStrings\": {",
                                            "\"DefaultConnection\": \"Server=",
                                            {
                                                "Fn::ImportValue" : {
                                                    "Fn::Sub" : "${DatabaseStackName}-Endpoint"
                                                }
                                            },
                                            ";Port=5432;Database=",
                                            {
                                                "Fn::ImportValue" : {
                                                    "Fn::Sub" : "${DatabaseStackName}-DBName"
                                                }
                                            },
                                            ";User Id=",
                                            {
                                                "Ref" : "DBUsername"
                                            },
                                            ";Password=",
                                            {
                                                "Ref" : "DBPassword"
                                            },
                                            ";\",",
                                            "\"S3Bucket\":\"",
                                            {
                                                "Fn::ImportValue" : {
                                                    "Fn::Sub" : "${S3StackName}-BucketName"
                                                }
                                            },
                                            "\"",
                                            "},",
                                            "\"Logging\": {",
                                            "\"LogLevel\": {",
                                            "\"Default\": \"Information\",",
                                            "\"Microsoft\": \"Warning\",",
                                            "\"Microsoft.Hosting.Lifetime\": \"Information\"",
                                            "}",
                                            "},",
                                            "\"AllowedHosts\": \"*\"",
                                            "}"
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "InstanceType" : {
                    "Ref" : "InstanceType"
                },
                "SecurityGroups" : [
                    {
                        "Ref" : "EC2SecurityGroup"
                    }
                ],
                "KeyName"        : {
                    "Ref" : "KeyName"
                },
                "IamInstanceProfile" : {"Ref": "InstanceProfile"},
                "ImageId"        : "ami-09d95fab7fff3776c",
                "UserData"       : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "# Install the files and packages from the metadata\n",
                                "yum install -y aws-cfn-bootstrap\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref" : "AWS::StackName"
                                },
                                "         --resource LaunchConfig ",
                                "         --configsets Install ",
                                "         --region ",
                                {
                                    "Ref" : "AWS::Region"
                                },
                                "\n",
                                "# Signal the status from cfn-init\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource WebServerGroup ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties" : {
                "Roles" : [
                    {"Ref":"InstanceRole"}
                ]
            }
        },
        "InstanceRole": {
            "Type":"AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": "ec2.amazonaws.com"
                      },
                      "Action": "sts:AssumeRole"
                    }
                  ]
                },
                "ManagedPolicyArns" : [
                    "arn:aws:iam::aws:policy/AmazonS3FullAccess"
                ]
              
            }
        },
        "WebServerGroup"   : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "VPCZoneIdentifier" : [
                    {
                        "Fn::ImportValue" : {
                            "Fn::Sub" : "${NetworkStackName}-PublicSubnet1"
                        }
                    },
                    {
                        "Fn::ImportValue" : {
                            "Fn::Sub" : "${NetworkStackName}-PublicSubnet2"
                        }
                    }
                ],
                "LaunchConfigurationName" : {
                    "Ref" : "LaunchConfig"
                },
                "MinSize"                 : "2",
                "MaxSize"                 : "2",
                "TargetGroupARNs"         : [
                    {
                        "Ref" : "ALBTargetGroup"
                    }
                ],
                "Tags"                    : [
                    {
                        "Key" : "deploygroup",
                        "Value" : "accessanalyser",
                        "PropagateAtLaunch" : true
                    }
                ]
            },
            "CreationPolicy" : {
                "ResourceSignal" : {
                    "Timeout" : "PT15M"
                }
            },
            "UpdatePolicy"   : {
                "AutoScalingRollingUpdate" : {
                    "MinInstancesInService" : "1",
                    "MaxBatchSize"          : "1",
                    "PauseTime"             : "PT15M",
                    "WaitOnResourceSignals" : "true"
                }
            }
        },
        "ApplicationLoadBalancer" : {
            "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties" : {
                "Subnets" : [
                    {
                        "Fn::ImportValue" : {
                            "Fn::Sub" : "${NetworkStackName}-PublicSubnet1"
                        }
                    },
                    {
                        "Fn::ImportValue" : {
                            "Fn::Sub" : "${NetworkStackName}-PublicSubnet2"
                        }
                    }
                ],
                "SecurityGroups" : [
                    {
                        "Fn::GetAtt" : [
                            "ALBSecurityGroup",
                            "GroupId"
                        ]
                    }
                ]
            }
        },
        "ALBListener"             : {
            "Type" : "AWS::ElasticLoadBalancingV2::Listener",
            "Properties" : {
                "DefaultActions" : [
                    {
                        "Type" : "forward",
                        "TargetGroupArn" : {
                            "Ref" : "ALBTargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn" : {
                    "Ref" : "ApplicationLoadBalancer"
                },
                "Port"            : "80",
                "Protocol"        : "HTTP"
            }
        },
        "ALBTargetGroup"          : {
            "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties" : {
                "HealthCheckIntervalSeconds" : 30,
                "HealthCheckTimeoutSeconds"  : 5,
                "HealthyThresholdCount"      : 3,
                "Port"                       : 5000,
                "Protocol"                   : "HTTP",
                "UnhealthyThresholdCount"    : 5,
                "VpcId"                      : {
                    "Fn::ImportValue" : {
                        "Fn::Sub" : "${NetworkStackName}-VPCID"
                    }
                }
            }
        },
        "ALBSecurityGroup"        : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Web access to load balancer",
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "80",
                        "ToPort"     : "80",
                        "CidrIp"     : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "80",
                        "ToPort"     : "80",
                        "CidrIpv6"   : "::/0"
                    }
                ],
                "VpcId"                : {
                    "Fn::ImportValue" : {
                        "Fn::Sub" : "${NetworkStackName}-VPCID"
                    }
                }
            }
        },
        "AppPipeline"             : {
            "Type" : "AWS::CodePipeline::Pipeline",
            "DependsOn" : "WebServerGroup",
            "Properties" : {
                "RoleArn" : {
                    "Fn::GetAtt" : [
                        "CodePipelineServiceRole",
                        "Arn"
                    ]
                },
                "Stages"  : [
                    {
                        "Name" : "Source",
                        "Actions" : [
                            {
                                "Name" : "SourceAction",
                                "ActionTypeId" : {
                                    "Category" : "Source",
                                    "Owner"    : "ThirdParty",
                                    "Version"  : "1",
                                    "Provider" : "GitHub"
                                },
                                "OutputArtifacts" : [
                                    {
                                        "Name" : "SourceOutput"
                                    }
                                ],
                                "Configuration"   : {
                                    "Owner" : {
                                        "Ref" : "RepoOwner"
                                    },
                                    "Repo"  : {
                                        "Ref" : "RepoName"
                                    },
                                    "Branch" : {
                                        "Ref" : "RepoBranch"
                                    },
                                    "OAuthToken" : {
                                        "Ref" : "GithubToken"
                                    },
                                    "PollForSourceChanges" : true
                                },
                                "RunOrder"        : 1
                            }
                        ]
                    },
                    {
                        "Name" : "Build",
                        "Actions" : [
                            {
                                "Name" : "BuildAction",
                                "InputArtifacts" : [
                                    {
                                        "Name" : "SourceOutput"
                                    }
                                ],
                                "OutputArtifacts" : [{
                                    "Name" : "BuildOutput"
                                }],
                                "ActionTypeId"    : {
                                    "Category" : "Build",
                                    "Owner"    : "AWS",
                                    "Version"  : "1",
                                    "Provider" : "CodeBuild"
                                },
                                "Configuration"   : {
                                    "ProjectName" : {
                                        "Ref" : "CodeBuildProject"
                                    }
                                },
                                "RunOrder"        : 1
                            }
                        ]
                    },
                    {
                        "Name" : "Release",
                        "Actions" : [
                            {
                                "Name" : "ReleaseAction",
                                "InputArtifacts" : [
                                    {
                                        "Name" : "BuildOutput"
                                    }
                                ],
                                "ActionTypeId"   : {
                                    "Category" : "Deploy",
                                    "Owner"    : "AWS",
                                    "Version"  : "1",
                                    "Provider" : "CodeDeploy"
                                },
                                "Configuration"  : {
                                    "ApplicationName" : {"Ref":"CodeDeployApplication"},
                                    "DeploymentGroupName" : {
                                        "Ref" : "DeploymentGroup"
                                    }
                                },
                                "RunOrder"       : 1
                            }
                        ]
                    }
                ],
                "ArtifactStore" : {
                    "Type" : "S3",
                    "Location" : {
                        "Ref" : "ArtifactStoreS3Location"
                    }
                }
            }
        },
        "ArtifactStoreS3Location" : {
            "Type" : "AWS::S3::Bucket"
        },
        "CodeBuildProject"        : {
            "Type" : "AWS::CodeBuild::Project",
            "Properties" : {
                "Artifacts" : {
                    "Type" : "CODEPIPELINE"
                },
                "Environment" : {
                    "ComputeType" : "BUILD_GENERAL1_SMALL",
                    "Image"       : "aws/codebuild/amazonlinux2-x86_64-standard:3.0",
                    "Type"        : "LINUX_CONTAINER"
                },
                "Source"      : {
                    "Type" : "CODEPIPELINE"
                },
                "ServiceRole" : {
                    "Fn::GetAtt" : [
                        "CodeBuildServiceRole",
                        "Arn"
                    ]
                }
            }
        },
        "CodeBuildServiceRole"    : {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Principal" : {
                                "Service" : [
                                    "codebuild.amazonaws.com"
                                ]
                            },
                            "Action"    : [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path"                     : "/service-role/",
                "Policies"                 : [
                    {
                        "PolicyName" : "root",
                        "PolicyDocument" : {
                            "Version" : "2012-10-17",
                            "Statement" : [
                                {
                                  "Sid": "CodeBuildDefaultPolicy",
                                  "Effect": "Allow",
                                  "Action": [
                                    "codebuild:*",
                                    "iam:PassRole"
                                  ],
                                  "Resource": "*"      
                                },
                                {
                                  "Sid": "CloudWatchLogsAccessPolicy",
                                  "Effect": "Allow",
                                  "Action": [
                                    "logs:*"
                                  ],
                                  "Resource": "*"
                                },
                                {
                                  "Sid": "S3AccessPolicy",
                                  "Effect": "Allow",
                                  "Action": [
                                    "s3:CreateBucket",
                                    "s3:GetObject",
                                    "s3:List*",
                                    "s3:PutObject"
                                  ],
                                  "Resource": "*"
                                },
                                {
                                  "Sid": "S3BucketIdentity",
                                  "Effect": "Allow",
                                  "Action": [
                                    "s3:GetBucketAcl",
                                    "s3:GetBucketLocation"
                                  ],
                                  "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "CodeDeployApplication"   : {
            "Type" : "AWS::CodeDeploy::Application",
            "Properties" : {
                "ComputePlatform" : "Server"
            }
        },
        "DeploymentGroup"         : {
            "Type" : "AWS::CodeDeploy::DeploymentGroup",
            "Properties" : {
                "ApplicationName" : {
                    "Ref" : "CodeDeployApplication"
                },
                "LoadBalancerInfo"  : {
                    "TargetGroupInfoList":[{
                        "Name" : {"Fn::GetAtt":["ALBTargetGroup","TargetGroupName"]}
                    }]
                },
                "AutoScalingGroups" : [{"Ref":"WebServerGroup"}],
                "ServiceRoleArn"    : {
                    "Fn::GetAtt" : [
                        "CodeDeployServiceRole",
                        "Arn"
                    ]
                }
            }
        },
        "CodeDeployServiceRole"   : {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Principal" : {
                                "Service" : [
                                    "codedeploy.amazonaws.com"
                                ]
                            },
                            "Action"    : [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path"                     : "/service-role/",
                "ManagedPolicyArns"        : [
                    "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
                ]
            }
        },
        "CodePipelineServiceRole" : {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Principal" : {
                                "Service" : [
                                    "codepipeline.amazonaws.com"
                                ]
                            },
                            "Action"    : [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path"                     : "/service-role/",
                "Policies"                 : [
                    {
                        "PolicyName" : "root",
                        "PolicyDocument" : {
                            "Statement" : [
                                {
                                    "Action" : [
                                        "iam:PassRole"
                                    ],
                                    "Resource" : "*",
                                    "Effect"   : "Allow",
                                    "Condition" : {
                                        "StringEqualsIfExists" : {
                                            "iam:PassedToService" : [
                                                "cloudformation.amazonaws.com",
                                                "elasticbeanstalk.amazonaws.com",
                                                "ec2.amazonaws.com",
                                                "ecs-tasks.amazonaws.com"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "Action" : [
                                        "codecommit:CancelUploadArchive",
                                        "codecommit:GetBranch",
                                        "codecommit:GetCommit",
                                        "codecommit:GetUploadArchiveStatus",
                                        "codecommit:UploadArchive"
                                    ],
                                    "Resource" : "*",
                                    "Effect"   : "Allow"
                                },
                                {
                                    "Action" : [
                                        "codedeploy:*"
                                    ],
                                    "Resource" : "*",
                                    "Effect"   : "Allow"
                                },
                                {
                                    "Action" : [
                                        "codestar-connections:UseConnection"
                                    ],
                                    "Resource" : "*",
                                    "Effect"   : "Allow"
                                },
                                {
                                    "Action" : [
                                        "elasticbeanstalk:*",
                                        "ec2:*",
                                        "elasticloadbalancing:*",
                                        "autoscaling:*",
                                        "cloudwatch:*",
                                        "s3:*",
                                        "sns:*",
                                        "cloudformation:*",
                                        "rds:*",
                                        "sqs:*",
                                        "ecs:*"
                                    ],
                                    "Resource" : "*",
                                    "Effect"   : "Allow"
                                },
                                {
                                    "Action" : [
                                        "lambda:InvokeFunction",
                                        "lambda:ListFunctions"
                                    ],
                                    "Resource" : "*",
                                    "Effect"   : "Allow"
                                },
                                {
                                    "Action" : [
                                        "opsworks:CreateDeployment",
                                        "opsworks:DescribeApps",
                                        "opsworks:DescribeCommands",
                                        "opsworks:DescribeDeployments",
                                        "opsworks:DescribeInstances",
                                        "opsworks:DescribeStacks",
                                        "opsworks:UpdateApp",
                                        "opsworks:UpdateStack"
                                    ],
                                    "Resource" : "*",
                                    "Effect"   : "Allow"
                                },
                                {
                                    "Action" : [
                                        "cloudformation:CreateStack",
                                        "cloudformation:DeleteStack",
                                        "cloudformation:DescribeStacks",
                                        "cloudformation:UpdateStack",
                                        "cloudformation:CreateChangeSet",
                                        "cloudformation:DeleteChangeSet",
                                        "cloudformation:DescribeChangeSet",
                                        "cloudformation:ExecuteChangeSet",
                                        "cloudformation:SetStackPolicy",
                                        "cloudformation:ValidateTemplate"
                                    ],
                                    "Resource" : "*",
                                    "Effect"   : "Allow"
                                },
                                {
                                    "Action" : [
                                        "codebuild:BatchGetBuilds",
                                        "codebuild:StartBuild"
                                    ],
                                    "Resource" : "*",
                                    "Effect"   : "Allow"
                                },
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "devicefarm:ListProjects",
                                        "devicefarm:ListDevicePools",
                                        "devicefarm:GetRun",
                                        "devicefarm:GetUpload",
                                        "devicefarm:CreateUpload",
                                        "devicefarm:ScheduleRun"
                                    ],
                                    "Resource" : "*"
                                },
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "servicecatalog:ListProvisioningArtifacts",
                                        "servicecatalog:CreateProvisioningArtifact",
                                        "servicecatalog:DescribeProvisioningArtifact",
                                        "servicecatalog:DeleteProvisioningArtifact",
                                        "servicecatalog:UpdateProduct"
                                    ],
                                    "Resource" : "*"
                                },
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "cloudformation:ValidateTemplate"
                                    ],
                                    "Resource" : "*"
                                },
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "ecr:DescribeImages"
                                    ],
                                    "Resource" : "*"
                                },
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "states:DescribeExecution",
                                        "states:DescribeStateMachine",
                                        "states:StartExecution"
                                    ],
                                    "Resource" : "*"
                                }
                            ],
                            "Version"   : "2012-10-17"
                        }
                    }
                ]
            }
        }
    },
    "Outputs": {
        "LoadBalancerAddress" : {
            "Description" : "DNS address of aplication entry point",
            "Value"       : { "Fn::GetAtt": ["ApplicationLoadBalancer", "DNSName"]}
        }
    }
}